@page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
@using Microsoft.AspNetCore.SignalR.Client
@using blazor.signalr.Shared;
@inject NavigationManager Navigation


<div class="container-fluid">

    <div class="row">

        <div class="col-10">

            <div class="row">

                <div class="col">video</div>

            </div>

            <div class="row" style="position:fixed; bottom:0; ">

                <div class="col">

                    <input class="form-range" type="range" min="-100" max="100" step="1" value="@vX" />
                    <input class="form-range" type="range" min="-100" max="100" step="1" value="@vY" />
                    <input class="form-range" type="range" min="-100" max="100" step="1" value="@vZ" />
                    <input class="form-range" type="range" min="-100" max="100" step="1" value="@Yaw" />
                    <button @onclick="onKillclick">Kill</button>

                </div>

            </div>


        </div>

        <div class="col">
            <h1>Telemetry</h1>

        </div>
    </div>
</div>



@code {

    int vX;
    int vY;
    int vZ;
    int Yaw;



    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/messagehub"))
        .Build();

        hubConnection.On<DroneState>("refresh", droneState =>
        {
            vX = droneState.speed.X;
            vY = droneState.speed.Y;
            vZ = droneState.speed.Z;
            Yaw = droneState.yaw;
            InvokeAsync(StateHasChanged);
        });


        await hubConnection.StartAsync();
    }

    public async Task setvX(string v)
    {
        vX = int.Parse(v);
        await UpdateDroneState();
    }

    public async Task setvY(string v)
    {
        vY = int.Parse(v);
        await UpdateDroneState();
    }

    public async Task setvZ(string v)
    {
        vZ = int.Parse(v);
        await UpdateDroneState();
    }

    protected async Task onKillclick()
    {
        await hubConnection.SendAsync("kill");
    }

    protected async Task UpdateDroneState()
    {
        await hubConnection.SendAsync("Update", new DroneCommands.RemoteCommand(new Speed(vX, vY, vZ), Yaw));
    }

}